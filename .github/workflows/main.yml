name: CI

on:
  push:
    tags:
    - '*'

jobs:
  #buildLinux:
  #  runs-on: ubuntu-latest      

  #  steps:
  #  - uses: actions/checkout@v2
    
  #  - name: Compile with QuickJS for Ubuntu
  #    uses: quickjs-actions/quickjs-ubuntu/@v1.0.0
  #    with:
  #      mainFile: hello
        
  #  - uses: actions/upload-artifact@master
  #    with:
  #      name: hello-ubuntu
  #      path: /home/runner/work/example/example/hello-ubuntu

  #  - name: Compile with QuickJS for CentOS
  #    uses: quickjs-actions/quickjs-centos/@v0.0.1
  #    with:
  #      mainFile: hello

  #  - uses: actions/upload-artifact@master
  #    with:
  #      name: hello-centos
  #      path: /home/runner/work/example/example/hello-centos

  #  - name: Compile with QuickJS for Alpine
  #    uses: quickjs-actions/quickjs-alpine/@v0.0.3
  #    with:
  #      mainFile: hello

  #  - uses: actions/upload-artifact@master
  #    with:
  #      name: hello-alpine
  #      path: /home/runner/work/example/example/hello-alpine

  #  - name: Compile with QuickJS for Fedora
  #    uses: quickjs-actions/quickjs-fedora/@v0.0.1
  #    with:
  #      mainFile: hello

  #  - uses: actions/upload-artifact@master
  #    with:
  #      name: hello-fedora
  #      path: /home/runner/work/example/example/hello-fedora

  #buildMacOS:
  #  runs-on: macos-latest

  #  steps:
  #  - uses: actions/checkout@v2
    
  #  - name: Download QuickJS source 
  #    run: curl https://bellard.org/quickjs/quickjs-2020-07-05.tar.xz --output quickjssrc.tar.xz; ls -la; pwd

  #  - name: Uncompress QuickJS source
  #    run: tar Jxf quickjssrc.tar.xz

  #  - name: Build and install QuickJS
  #    run: ls -la; cd quickjs-2020-07-05; make; make install

  #  - name: Verify installation
  #    run: which qjsc; which qjs

  #  - name: Compile with QuickJS for MacOS
  #    run: qjsc -flto -o hello-macos hello.js
        
  #  - uses: actions/upload-artifact@master
  #    with:
  #      name: hello-macos
  #      path: hello-macos
        
  buildWindows:
    runs-on: windows-2019
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Download QuickJS source 
      run: curl https://bellard.org/quickjs/quickjs-2020-07-05.tar.xz --output quickjssrc.tar.xz

    - name: Uncompress QuickJS source
      run: tar Jxf quickjssrc.tar.xz

    - name: Build and install QuickJS
      run: dir quickjs-2020-07-05
           make
           make install

    - name: Verify installation
      run: which qjsc; which qjs

    - name: Compile with QuickJS for Windows
      run: qjsc -flto -o hello-windows hello.js
    
    - uses: actions/upload-artifact@master
      with:
        name: hello-windows
        path: hello-windows

  createRelease:
    runs-on: ubuntu-latest      
    needs: [buildWindows]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: QuickJS Example - Release ${{ github.ref }}
        draft: false
        prerelease: false

    #- uses: actions/download-artifact@master
    #  with:
    #    name: hello-ubuntu
    #    path: ./

    #- uses: actions/download-artifact@master
    #  with:
    #    name: hello-macos
    #    path: ./
    
    - uses: actions/download-artifact@master
      with:
        name: hello-windows
        path: ./
    
    #- name: Upload Ubuntu Binary
    #  uses: actions/upload-release-asset@v1
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
    #    upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
    #    asset_path: hello-ubuntu
    #    asset_name: hello-ubuntu
    #    asset_content_type: application/octet-stream

    #- name: Upload MacOS Binary
    #  uses: actions/upload-release-asset@v1
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
    #    upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
    #    asset_path: hello-macos
    #    asset_name: hello-macos
    #    asset_content_type: application/octet-stream
    
    - name: Upload Windows Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: hello-windows
        asset_name: hello-windows
        asset_content_type: application/octet-stream

    #- name: Upload CentOS Binary
    #  uses: actions/upload-release-asset@v1
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
    #    upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
    #    asset_path: /home/runner/work/example/example/hello-centos
    #    asset_name: hello-centos
    #    asset_content_type: application/octet-stream

    #- name: Upload Alpine Binary
    #  uses: actions/upload-release-asset@v1
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
    #    upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
    #    asset_path: /home/runner/work/example/example/hello-alpine
    #    asset_name: hello-alpine
    #    asset_content_type: application/octet-stream

    #- name: Upload Fedora Binary
    #  uses: actions/upload-release-asset@v1
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
    #    upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
    #    asset_path: /home/runner/work/example/example/hello-fedora
    #    asset_name: hello-fedora
    #    asset_content_type: application/octet-stream
